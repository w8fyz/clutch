services:
  db:
    image: postgres:16-alpine
    container_name: freshperf-web-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - clutch-app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prod -d freshperf-web"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: clutch-api
    restart: unless-stopped
    environment:
      DOCKER_RUNNING: true
      FIBER_SECRET_KEY: ${FIBER_SECRET_KEY}
      FIBER_TOKEN_VALIDITY: ${FIBER_TOKEN_VALIDITY}
      FIBER_REFRESH_TOKEN_VALIDITY: ${FIBER_REFRESH_TOKEN_VALIDITY}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      FRONTEND_URL: ${FRONTEND_URL}
      DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
      DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - clutch-app-network

  front:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: clutch-front
    restart: unless-stopped
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  clutch-app-network:
